https://solscan.io/tx/va3HjTrH3c3RbBhU31f47BQNfVXiHdc2CyQJbNCwVKHp8AdMwMCY4sqiqqbo6xuYpDYorGKSXUgu31xacu8xrFi

https://solscan.io/tx/28us2Mbb6UsxgwsLyUSHRSQ2Xx8KRKqrskqju9pbCy9FsYYepNGPfjdDYL9pHsAnG7uGhGSaq23ATdxET8wJ9Rg7

In this two transaction , it has both pumpfun and pump swap , call pumpfun : migerate and  pump swap : Buy
so this current bot is not working correctly in identifing this kind of transaction 
#3 Pump.fun instruction
> Program log: Instruction: Migrate
> Program log: Bonding curve already migrated
> Program 

Pump.fun consumed 24612 of 499700 compute units
> Program returned success
#4 System Program instruction
> Program returned success
#5 Token Program instruction
> Program log: Instruction: InitializeAccount
> Program 

Token Program consumed 3443 of 474938 compute units
> Program returned success
#6 Associated Token Account Program instruction
> Program log: CreateIdempotent
> Invoking 

Token Program
  > Program log: Instruction: GetAccountDataSize
  > Program 

Token Program consumed 1569 of 466090 compute units
  > Program return: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA pQAAAAAAAAA=
  > Program returned success
> Invoking 

System Program
  > Program returned success
> Program log: Initialize the associated token account
> Invoking 

Token Program
  > Program log: Instruction: InitializeImmutableOwner
  > Program log: Please upgrade to SPL Token 2022 for immutable owner support
  > Program 

Token Program consumed 1405 of 459503 compute units
  > Program returned success
> Invoking 

Token Program
  > Program log: Instruction: InitializeAccount3
  > Program 

Token Program consumed 4188 of 455621 compute units
  > Program returned success
> Program 

Associated Token Account Program consumed 20345 of 471495 compute units
> Program returned success
#7 Photon Program instruction
> Program log: Instruction: PumpAmmSwap
> Invoking 

Pump.fun AMM
  > Program log: Instruction: Buy
  > Invoking 

Token Program
    > Program log: Instruction: TransferChecked
    > Program 

Token Program consumed 6147 of 398332 compute units
    > Program returned success
  > Invoking 

Token Program
    > Program log: Instruction: TransferChecked
    > Program 

Token Program consumed 6238 of 389518 compute units
    > Program returned success
  > Invoking 

Token Program
    > Program log: Instruction: TransferChecked
    > Program 

Token Program consumed 6238 of 380628 compute units
    > Program returned success
  > Program data: Z/RSHyz1d3f5hx9oAAAAAJo5aGKGCQAAXp4GsQAAAAAAAAAAAAAAAF6eBrEAAAAALMsrCKDnAAAUKo0VEAAAAMaalbAAAAAAFAAAAAAAAABGaVoAAAAAAAUAAAAAAAAAUpoWAAAAAAAMBPCwAAAAAF6eBrEAAAAAvP2P1CSsRrxnroOCZqdGKzzYG/bSP1H3h1aZQ76PtzoNCslI6ozMdcxdDFCqud8JocdqEp+1wjdWOm6dbHbGejZuIUv0BbpAVZBmhE7MT3PxDWfKlemUBACilY/tmvYfljAw/ZoWM/nz04tzXHGJafFkZg6S6804UPvu2wOU4v1gjMwd/OlhtDt3nBkVBabi079F1aTbRhitdsgtYXVFNV0OMm1Matf/fY9TP8MJCFS9H+8ykQhAD19V155Lh4BR
  > Invoking 

Pump.fun AMM
    > Program 

Pump.fun AMM consumed 2004 of 368526 compute units
    > Program returned success
  > Program 

Pump.fun AMM consumed 58964 of 424947 compute units
  > Program returned success
> Program 

Photon Program consumed 86157 of 451150 compute units
> Program returned success

===============================
Deep recursion: Functions calling themselves too many times without tail call optimization

Large stack allocations: Creating very large data structures on the stack instead of the heap

Infinite recursion: A bug causing a function to call itself indefinitely
1. Increase stack size
You can configure larger stack sizes for Tokio worker threads:
2. Convert recursion to iteration
Replace recursive algorithms with iterative ones:
3. Move large allocations to the heap
Use Box or other heap-allocated types for large data:
4. Check for infinite recursion
Review your code for any cases where a function might call itself indefinitely.

5. Use async properly
Ensure you're not blocking the async runtime with synchronous operations that might cause stack buildup.


I've fixed the recursive loop issue by:
Implementing proper progressive sell functionality in execute_progressive_sell
Making progressive_sell a simple wrapper that calls execute_progressive_sell without recursion
Adding proper token amount calculation and tracking
Implementing proper protocol-specific selling logic
The key changes are:
Removed the recursive call between progressive_sell and execute_progressive_sell
Added proper token amount calculation based on configured chunks
Added time-based checks between sells
Added proper tracking of sell attempts and successes
Implemented actual selling logic for both PumpFun and PumpSwap protocols
This should resolve the stack overflow error you were experiencing. The code now:
Properly manages progressive selling in chunks
Tracks sell attempts and successes
Enforces time intervals between sells
Handles protocol-specific selling logic
Records trade execution details
Try running your code again - it should no longer have the stack overflow issue. Let me know if you encounter any other issues!
